sub<-subset_move(move, from=ff_times$time_before[i], to=ff_times$time_after[i], tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
satellite_frames <- frames_spatial(move_data, map_service = "mapbox", map_type = "satellite", map_token = "pk.eyJ1IjoiZXdlYnMiLCJhIjoiY2tpM3puNG96MGF3cjM0bnRsZHV2MXc4MSJ9.hy4rr5H9BNRr79c6S206VQ", tail_size = 0.8, path_colours=c( "red", "blue","deepskyblue", "yellow","purple",  "plum1", "green","springgreen4", "aquamarine","orange", "orange4"), tail_length=10, trace_show = F, equidistant = F, path_legend = T) %>%
add_labels(x = "Longitude", y = "Latitude") %>%
add_northarrow() %>%
add_timestamps(move_data, type = "label") %>%
add_scalebar()
satellite_frames[[10]]
plot_dir <- paste0("F:/PhD/R/Galaxy/video/ff/",ff_times$date[i],"-",ff_times$Time[i])
#save as a movie
animate_frames(satellite_frames, out_file = paste0(plot_dir,".mp4"),
width = 800, height = 800,
overwrite = T, end_pause = 1, fps=10)
ff_times$time_before <- ff_times$datetime   - lubridate::minutes(15)
ff_times$time_after <- ff_times$datetime   + lubridate::minutes(15)
for (i in 1:nrow(ff_times)){
sub<-subset_move(move, from=ff_times$time_before[i], to=ff_times$time_after[i], tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
satellite_frames <- frames_spatial(move_data, map_service = "mapbox", map_type = "satellite", map_token = "pk.eyJ1IjoiZXdlYnMiLCJhIjoiY2tpM3puNG96MGF3cjM0bnRsZHV2MXc4MSJ9.hy4rr5H9BNRr79c6S206VQ", tail_size = 0.8, path_colours=c( "red", "blue","deepskyblue", "yellow","purple",  "plum1", "green","springgreen4", "aquamarine","orange", "orange4"), tail_length=10, trace_show = F, equidistant = F, path_legend = T) %>%
add_labels(x = "Longitude", y = "Latitude") %>%
add_northarrow() %>%
add_timestamps(move_data, type = "label") %>%
add_scalebar()
satellite_frames[[10]]
plot_dir <- paste0("F:/PhD/R/Galaxy/video/ff/",ff_times$date[i],"-",ff_times$Time[i])
#save as a movie
animate_frames(satellite_frames, out_file = paste0(plot_dir,".mp4"),
width = 800, height = 800,
overwrite = T, end_pause = 1, fps=10)
}
View(ff_times)
i = 1
sub<-subset_move(move, from=ff_times$time_before[i], to=ff_times$time_after[i], tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
satellite_frames <- frames_spatial(move_data, map_service = "mapbox", map_type = "satellite", map_token = "pk.eyJ1IjoiZXdlYnMiLCJhIjoiY2tpM3puNG96MGF3cjM0bnRsZHV2MXc4MSJ9.hy4rr5H9BNRr79c6S206VQ", tail_size = 0.8, path_colours=c( "red", "blue","deepskyblue", "yellow","purple",  "plum1", "green","springgreen4", "aquamarine","orange", "orange4"), tail_length=10, trace_show = F, equidistant = F, path_legend = T) %>%
add_labels(x = "Longitude", y = "Latitude") %>%
add_northarrow() %>%
add_timestamps(move_data, type = "label") %>%
add_scalebar()
satellite_frames[[10]]
plot_dir <- paste0("F:/PhD/R/Galaxy/video/ff/",ff_times$date[i],"-",ff_times$Time[i],ff_times$ff[i])
#save as a movie
animate_frames(satellite_frames, out_file = paste0(plot_dir,".mp4"),
width = 800, height = 800,
overwrite = T, end_pause = 1, fps=10)
#read in csv with fission fusion times
ff_times <- read.csv("F:/PhD/R/Galaxy/Visualise movements/fission_fusion_times.csv")
ff_times$date <- chartr(".", "_", ff_times$date)
ff_times$datetime <- paste(ff_times$date, ff_times$time, sep = " ")
ff_times$datetime <- as.POSIXct(x = ff_times$datetime, tz = 'UTC', format = "%d_%m_%y %H:%M")
ff_times$Time <- chartr(":", ".", ff_times$time)
ff_times$time_before <- ff_times$datetime   - lubridate::minutes(20)
ff_times$time_after <- ff_times$datetime   + lubridate::minutes(20)
for (i in 1:nrow(ff_times)){
sub<-subset_move(move, from=ff_times$time_before[i], to=ff_times$time_after[i], tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
satellite_frames <- frames_spatial(move_data, map_service = "mapbox", map_type = "satellite", map_token = "pk.eyJ1IjoiZXdlYnMiLCJhIjoiY2tpM3puNG96MGF3cjM0bnRsZHV2MXc4MSJ9.hy4rr5H9BNRr79c6S206VQ", tail_size = 0.8, path_colours=c( "red", "blue","deepskyblue", "yellow","purple",  "plum1", "green","springgreen4", "aquamarine","orange", "orange4"), tail_length=10, trace_show = F, equidistant = F, path_legend = T) %>%
add_labels(x = "Longitude", y = "Latitude") %>%
add_northarrow() %>%
add_timestamps(move_data, type = "label") %>%
add_scalebar()
satellite_frames[[10]]
plot_dir <- paste0("F:/PhD/R/Galaxy/video/ff/",ff_times$date[i],"-",ff_times$Time[i],ff_times$ff[i])
#save as a movie
animate_frames(satellite_frames, out_file = paste0(plot_dir,".mp4"),
width = 800, height = 800,
overwrite = T, end_pause = 1, fps=10)
}
#csv downloaded from movebank, only gps, includes
Galaxy <- read.csv('F:/PhD/R/MoveVis_Presedentes/Coati Galaxy Group Gamboa.csv')
Galaxy$datetime <- as.POSIXct(x = Galaxy$timestamp, tz = 'UTC', format = "%Y-%m-%d %H:%M:%OS")
#----- only if movebank can download csv file ----------------------
move<-df2move(Galaxy, x="location.long", y="location.lat", proj=CRS("+proj=longlat +datum=WGS84"),time="datetime", track_id="individual.local.identifier")
#read in csv with fission fusion times
ff_times <- read.csv("F:/PhD/R/Galaxy/Visualise movements/fission_fusion_times.csv")
ff_times$date <- chartr(".", "_", ff_times$date)
ff_times$datetime <- paste(ff_times$date, ff_times$time, sep = " ")
ff_times$datetime <- as.POSIXct(x = ff_times$datetime, tz = 'UTC', format = "%d_%m_%y %H:%M")
ff_times$Time <- chartr(":", ".", ff_times$time)
#getting times 20 minutes before and after the fission/fusion event
ff_times$time_before <-ff_times$datetime - lubridate::minutes(20)
ff_times$time_after <- ff_times$datetime + lubridate::minutes(20)
for (i in 1:nrow(ff_times)){
sub<-subset_move(move, from=ff_times$time_before[i], to=ff_times$time_after[i], tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
satellite_frames <- frames_spatial(move_data, map_service = "mapbox", map_type = "satellite", map_token = "pk.eyJ1IjoiZXdlYnMiLCJhIjoiY2tpM3puNG96MGF3cjM0bnRsZHV2MXc4MSJ9.hy4rr5H9BNRr79c6S206VQ", tail_size = 0.8, path_colours=c( "red", "blue","deepskyblue", "yellow","purple",  "plum1", "green","springgreen4", "aquamarine","orange", "orange4"), tail_length=10, trace_show = F, equidistant = F, path_legend = T) %>%
add_labels(x = "Longitude", y = "Latitude") %>%
add_northarrow() %>%
add_timestamps(move_data, type = "label") %>%
add_scalebar()
satellite_frames[[10]]
plot_dir <- paste0("F:/PhD/R/Galaxy/video/ff/",ff_times$date[i],"-",ff_times$Time[i],ff_times$ff[i])
#save as a movie
animate_frames(satellite_frames, out_file = paste0(plot_dir,".mp4"),
width = 800, height = 800,
overwrite = T, end_pause = 1, fps=10)
}
library(moveVis)
library(sp)
library(move)
library(tidyverse)
library(leaflet)
library(mapview)
library(ggmap)
#csv downloaded from movebank, only gps, includes
Presed <- read.csv('F:/PhD/BCI coatis 2023/GPS_csv_files/Coati Presedente CCAS BCI 2023_all_days.csv')
#so I don't overwrite all the data each time
Presed_all <- Presed
#remove Wildflower rows otherwise df2move doesnt work
Presed <- Presed[!(Presed$individual.local.identifier == "Wildflower"),]
Presed$datetime <- as.POSIXct(x = Presed$timestamp, tz = 'UTC', format = "%Y-%m-%d %H:%M:%OS")
#----- only if movebank can download csv file ----------------------
move<-df2move(Presed, x="location.long", y="location.lat", proj=CRS("+proj=longlat +datum=WGS84"),time="datetime", track_id="individual.local.identifier") # create a move object
sub<-subset_move(move, from="2023-01-23 11:00:45", to="2023-01-23 14:00:45", tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
view_spatial(move_data)
Presed <- Presed[!(Presed$individual.local.identifier == "Gendry"),]
Presed$datetime <- as.POSIXct(x = Presed$timestamp, tz = 'UTC', format = "%Y-%m-%d %H:%M:%OS")
move<-df2move(Presed, x="location.long", y="location.lat", proj=CRS("+proj=longlat +datum=WGS84"),time="datetime", track_id="individual.local.identifier") # create a move object
sub<-subset_move(move, from="2023-01-23 11:00:45", to="2023-01-23 14:00:45", tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
view_spatial(move_data)
test <- move_data
test <- test@trackId == "Gillard"
test@trackId
test <- move_data
View(test)
#making it a movie
satellite_frames <- frames_spatial(move_data, map_service = "mapbox", map_type = "satellite", map_token = "pk.eyJ1IjoiZXdlYnMiLCJhIjoiY2tpM3puNG96MGF3cjM0bnRsZHV2MXc4MSJ9.hy4rr5H9BNRr79c6S206VQ", tail_size = 0.8, path_colours=c( "midnightblue", "blue","deepskyblue", "purple4","purple",  "plum1", "green","springgreen4", "aquamarine","orange", "orange4", "red", "red4","white","black","seashell4", "deeppink1","magenta3", "cyan"), tail_length=10, trace_show = F, equidistant = F, path_legend = T) %>%
add_labels(x = "Longitude", y = "Latitude") %>%
add_northarrow() %>%
add_timestamps(move_data, type = "label") %>%
add_scalebar()# this takes a few minutes
#making it a movie
satellite_frames <- frames_spatial(move_data, map_service = "mapbox", map_type = "satellite", map_token = "pk.eyJ1IjoiZXdlYnMiLCJhIjoiY2tpM3puNG96MGF3cjM0bnRsZHV2MXc4MSJ9.hy4rr5H9BNRr79c6S206VQ", tail_size = 0.8, path_colours=c( "midnightblue", "blue","deepskyblue", "purple4","purple",  "plum1", "green","springgreen4", "aquamarine","orange", "orange4", "red", "red4","white","black","seashell4", "deeppink1","magenta3", "cyan","lemonchiffon2"), tail_length=10, trace_show = F, equidistant = F, path_legend = T) %>%
add_labels(x = "Longitude", y = "Latitude") %>%
add_northarrow() %>%
add_timestamps(move_data, type = "label") %>%
add_scalebar()# this takes a few minutes
#looking at the 100th frame
satellite_frames[[1200]]
#looking at the 100th frame
satellite_frames[[100]]
#looking at the 100th frame
satellite_frames[[500]]
#looking at the 100th frame
satellite_frames[[800]]
#save as a movie
animate_frames(satellite_frames, out_file = "F:/PhD/R/MoveVis_Presedentes/movies/moveVis_satellite_230123_noGendry.mp4",
width = 800, height = 800,
overwrite = T, end_pause = 2, fps=10) #change fps to 10 for highres
sub<-subset_move(move, from="2023-01-23 12:40:45", to="2023-01-23 13:55:45", tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
#remove Wildflower rows otherwise df2move doesnt work
Presed <- Presed[!(Presed$individual.local.identifier == "Wildflower"),]
#remove males
Presed <- Presed[!(Presed$individual.local.identifier == "Lula"),]
Presed <- Presed[!(Presed$individual.local.identifier =="Kenyatta"),]
Presed <- Presed[!(Presed$individual.local.identifier == "Gendry"),]
Presed <- Presed[!(Presed$individual.local.identifier == "Sam"),]
Presed$datetime <- as.POSIXct(x = Presed$timestamp, tz = 'UTC', format = "%Y-%m-%d %H:%M:%OS")
#----- only if movebank can download csv file ----------------------
move<-df2move(Presed, x="location.long", y="location.lat", proj=CRS("+proj=longlat +datum=WGS84"),time="datetime", track_id="individual.local.identifier") # create a move object
sub<-subset_move(move, from="2023-01-23 12:40:45", to="2023-01-23 13:55:45", tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
view_spatial(move_data)
Presed <- Presed[!(Presed$individual.local.identifier == "Peron"),]
Presed$datetime <- as.POSIXct(x = Presed$timestamp, tz = 'UTC', format = "%Y-%m-%d %H:%M:%OS")
#----- only if movebank can download csv file ----------------------
move<-df2move(Presed, x="location.long", y="location.lat", proj=CRS("+proj=longlat +datum=WGS84"),time="datetime", track_id="individual.local.identifier") # create a move object
sub<-subset_move(move, from="2023-01-23 12:40:45", to="2023-01-23 13:55:45", tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
view_spatial(move_data)
#making it a movie
satellite_frames <- frames_spatial(move_data, map_service = "mapbox", map_type = "satellite", map_token = "pk.eyJ1IjoiZXdlYnMiLCJhIjoiY2tpM3puNG96MGF3cjM0bnRsZHV2MXc4MSJ9.hy4rr5H9BNRr79c6S206VQ", tail_size = 0.8, path_colours=c( "blue","deepskyblue", "purple4","purple",  "plum1", "green","springgreen4", "aquamarine","orange","orange4", "red", "red4","white","black","magenta3", "cyan"), tail_length=10, trace_show = F, equidistant = F, path_legend = T) %>%
add_labels(x = "Longitude", y = "Latitude") %>%
add_northarrow() %>%
add_timestamps(move_data, type = "label") %>%
add_scalebar()# this takes a few minutes
#looking at the 100th frame
satellite_frames[[800]]
#looking at the 100th frame
satellite_frames[[100]]
#save as a movie
animate_frames(satellite_frames, out_file = "F:/PhD/R/MoveVis_Presedentes/movies/moveVis_satellite_230123_ffexample.mp4",
width = 800, height = 800,
overwrite = T, end_pause = 2, fps=10) #change fps to 10 for highres
sub<-subset_move(move, from="2023-01-25 11:00:45", to="2023-01-25 14:00:45", tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
#so I don't overwrite all the data each time
Presed_all <- Presed
#csv downloaded from movebank, only gps, includes
Presed <- read.csv('F:/PhD/BCI coatis 2023/GPS_csv_files/Coati Presedente CCAS BCI 2023_all_days.csv')
#so I don't overwrite all the data each time
Presed_all <- Presed
#remove Wildflower rows otherwise df2move doesnt work
Presed <- Presed[!(Presed$individual.local.identifier == "Wildflower"),]
#remove males
Presed <- Presed[!(Presed$individual.local.identifier == "Lula"),]
Presed <- Presed[!(Presed$individual.local.identifier =="Kenyatta"),]
Presed <- Presed[!(Presed$individual.local.identifier == "Gendry"),]
Presed <- Presed[!(Presed$individual.local.identifier == "Sam"),]
Presed <- Presed[!(Presed$individual.local.identifier == "Peron"),]
Presed$datetime <- as.POSIXct(x = Presed$timestamp, tz = 'UTC', format = "%Y-%m-%d %H:%M:%OS")
#----- only if movebank can download csv file ----------------------
move<-df2move(Presed, x="location.long", y="location.lat", proj=CRS("+proj=longlat +datum=WGS84"),time="datetime", track_id="individual.local.identifier") # create a move object
sub<-subset_move(move, from="2023-01-25 11:00:45", to="2023-01-25 14:00:45", tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
view_spatial(move_data)
#making it a movie
satellite_frames <- frames_spatial(move_data, map_service = "mapbox", map_type = "satellite", map_token = "pk.eyJ1IjoiZXdlYnMiLCJhIjoiY2tpM3puNG96MGF3cjM0bnRsZHV2MXc4MSJ9.hy4rr5H9BNRr79c6S206VQ", tail_size = 0.8, path_colours=c( "blue","deepskyblue", "purple4","purple",  "plum1", "green","springgreen4", "aquamarine","orange","orange4", "red", "red4","white","black","magenta3", "cyan"), tail_length=10, trace_show = F, equidistant = F, path_legend = T) %>%
add_labels(x = "Longitude", y = "Latitude") %>%
add_northarrow() %>%
add_timestamps(move_data, type = "label") %>%
add_scalebar()# this takes a few minutes
#looking at the 100th frame
satellite_frames[[100]]
#save as a movie
animate_frames(satellite_frames, out_file = "F:/PhD/R/MoveVis_Presedentes/movies/moveVis_satellite_250123_nomales.mp4",
width = 800, height = 800,
overwrite = T, end_pause = 2, fps=10) #change fps to 10 for highres
#save as a movie
animate_frames(satellite_frames, out_file = "F:/PhD/R/MoveVis_Presedentes/movies/moveVis_satellite_250123_nomales.mp4",
width = 800, height = 800,
overwrite = T, end_pause = 2, fps=10) #change fps to 10 for highres
#csv downloaded from movebank, only gps, includes
Presed <- read.csv('F:/PhD/BCI coatis 2023/GPS_csv_files/Coati Presedente CCAS BCI 2023_all_days.csv')
#remove Wildflower rows otherwise df2move doesnt work
Presed <- Presed[!(Presed$individual.local.identifier == "Wildflower"),]
Presed <- Presed[!(Presed$individual.local.identifier == "Gendry"),]
Presed$datetime <- as.POSIXct(x = Presed$timestamp, tz = 'UTC', format = "%Y-%m-%d %H:%M:%OS")
#----- only if movebank can download csv file ----------------------
move<-df2move(Presed, x="location.long", y="location.lat", proj=CRS("+proj=longlat +datum=WGS84"),time="datetime", track_id="individual.local.identifier") # create a move object
sub<-subset_move(move, from="2023-01-27 11:00:45", to="2023-01-27 14:00:45", tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
view_spatial(move_data)
Presed <- Presed[!(Presed$individual.local.identifier == "Sam"),]
Presed$datetime <- as.POSIXct(x = Presed$timestamp, tz = 'UTC', format = "%Y-%m-%d %H:%M:%OS")
#----- only if movebank can download csv file ----------------------
move<-df2move(Presed, x="location.long", y="location.lat", proj=CRS("+proj=longlat +datum=WGS84"),time="datetime", track_id="individual.local.identifier") # create a move object
sub<-subset_move(move, from="2023-01-27 11:00:45", to="2023-01-27 14:00:45", tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
view_spatial(move_data)
#making it a movie
satellite_frames <- frames_spatial(move_data, map_service = "mapbox", map_type = "satellite", map_token = "pk.eyJ1IjoiZXdlYnMiLCJhIjoiY2tpM3puNG96MGF3cjM0bnRsZHV2MXc4MSJ9.hy4rr5H9BNRr79c6S206VQ", tail_size = 0.8, path_colours=c( "midnightblue","blue","deepskyblue", "purple4","purple",  "plum1", "green","springgreen4", "aquamarine","orange","orange4", "red", "red4","white","black","seashell4", "magenta3","deeppink1", "cyan"), tail_length=10, trace_show = F, equidistant = F, path_legend = T) %>%
add_labels(x = "Longitude", y = "Latitude") %>%
add_northarrow() %>%
add_timestamps(move_data, type = "label") %>%
add_scalebar()# this takes a few minutes
#looking at the 100th frame
satellite_frames[[100]]
#save as a movie
animate_frames(satellite_frames, out_file = "F:/PhD/R/MoveVis_Presedentes/movies/moveVis_satellite_270123_noGendrySam.mp4",
width = 800, height = 800,
overwrite = T, end_pause = 2, fps=10) #change fps to 10 for highres
#save as a movie
animate_frames(satellite_frames, out_file = "F:/PhD/R/MoveVis_Presedentes/movies/moveVis_satellite_270123_noGendrySam.mp4",
width = 800, height = 800,
overwrite = T, end_pause = 2, fps=10) #change fps to 10 for highres
#csv downloaded from movebank, only gps, includes
Presed <- read.csv('F:/PhD/BCI coatis 2023/GPS_csv_files/Coati Presedente CCAS BCI 2023_all_days.csv')
#remove Wildflower rows otherwise df2move doesnt work
Presed <- Presed[!(Presed$individual.local.identifier == "Wildflower"),]
Presed <- Presed[!(Presed$individual.local.identifier == "Gendry"),]
Presed$datetime <- as.POSIXct(x = Presed$timestamp, tz = 'UTC', format = "%Y-%m-%d %H:%M:%OS")
#----- only if movebank can download csv file ----------------------
move<-df2move(Presed, x="location.long", y="location.lat", proj=CRS("+proj=longlat +datum=WGS84"),time="datetime", track_id="individual.local.identifier") # create a move object
sub<-subset_move(move, from="2023-01-28 11:00:45", to="2023-01-28 14:00:45", tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
view_spatial(move_data)
sub<-subset_move(move, from="2023-01-29 11:00:45", to="2023-01-29 14:00:45", tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
view_spatial(move_data)
#csv downloaded from movebank, only gps, includes
Presed <- read.csv('F:/PhD/BCI coatis 2023/GPS_csv_files/Coati Presedente CCAS BCI 2023_all_days.csv')
#remove Wildflower rows otherwise df2move doesnt work
Presed <- Presed[!(Presed$individual.local.identifier == "Wildflower"),]
Presed$datetime <- as.POSIXct(x = Presed$timestamp, tz = 'UTC', format = "%Y-%m-%d %H:%M:%OS")
#----- only if movebank can download csv file ----------------------
move<-df2move(Presed, x="location.long", y="location.lat", proj=CRS("+proj=longlat +datum=WGS84"),time="datetime", track_id="individual.local.identifier") # create a move object
sub<-subset_move(move, from="2023-01-29 11:00:45", to="2023-01-29 14:00:45", tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
view_spatial(move_data)
sub<-subset_move(move, from="2023-01-30 11:00:45", to="2023-01-30 14:00:45", tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
view_spatial(move_data)
library(moveVis)
library(sp)
library(move)
library(tidyverse)
library(leaflet)
library(mapview)
library(ggmap)
#csv downloaded from movebank, only gps, includes
Presed <- read.csv('F:/PhD/BCI coatis 2023/GPS_csv_files/Coati Presedente CCAS BCI 2023_all_days.csv')
#so I don't overwrite all the data each time
Presed_all <- Presed
#remove Wildflower rows otherwise df2move doesnt work
Presed <- Presed[!(Presed$individual.local.identifier == "Wildflower"),]
Presed <- Presed[!(Presed$individual.local.identifier == "Gendry"),]
Presed <- Presed[!(Presed$individual.local.identifier == "Sam"),]
Presed$datetime <- as.POSIXct(x = Presed$timestamp, tz = 'UTC', format = "%Y-%m-%d %H:%M:%OS")
#----- only if movebank can download csv file ----------------------
move<-df2move(Presed, x="location.long", y="location.lat", proj=CRS("+proj=longlat +datum=WGS84"),time="datetime", track_id="individual.local.identifier") # create a move object
sub<-subset_move(move, from="2023-01-28 11:00:45", to="2023-01-28 14:00:45", tz="UTC")
move_data <- align_move(sub, res = 12, unit = "secs")
view_spatial(move_data)
#making it a movie
satellite_frames <- frames_spatial(move_data, map_service = "mapbox", map_type = "satellite", map_token = "pk.eyJ1IjoiZXdlYnMiLCJhIjoiY2tpM3puNG96MGF3cjM0bnRsZHV2MXc4MSJ9.hy4rr5H9BNRr79c6S206VQ", tail_size = 0.8, path_colours=c( "midnightblue","blue","deepskyblue", "purple4","purple",  "plum1", "green","springgreen4", "aquamarine","orange","orange4", "red", "red4","white","black","seashell4", "magenta3","deeppink1", "cyan"), tail_length=10, trace_show = F, equidistant = F, path_legend = T) %>%
add_labels(x = "Longitude", y = "Latitude") %>%
add_northarrow() %>%
add_timestamps(move_data, type = "label") %>%
add_scalebar()# this takes a few minutes
load("C:/Users/egrout/Dropbox/coatithon/processed/2022/galaxy/galaxy_xy_highres_level0.RData")
#this script is for comparing the fission fusion events in the automated detection to the manual labels
#LIBRARY
library(lubridate)
#set time zone to UTC to avoid confusing time zone issues
Sys.setenv(TZ='UTC')
group <- 'galaxy' #subdirectory where the group data is stored
codedir <- 'C:/Users/egrout/Dropbox/coatithon/coatithon_code/'
groupdir <- "C:/Users/egrout/Dropbox/coatithon/processed/2022/galaxy/"
plot_dir <- 'C:/Users/egrout/Dropbox/coatithon/results/galaxy_results/level1/'
#groupdir <- "C:/Users/egrout/Dropbox/coatithon/processed/2023/presedente/"
#plot_dir <- 'C:/Users/egrout/Dropbox/coatithon/results/presedente_results/level1/'
#FUNCTIONS
#read in functions
setwd(codedir)
source('coati_function_library.R')
#LOAD DATA
#navigate into directory
setwd(codedir)
#read in events
events <- read.csv(paste0('Split_mechanics/',group,'_manual_split_merge_clean.csv'), sep=';')
#read in coati ids
setwd(groupdir)
load(file=paste0(group,'_coati_ids.RData'))
#read in timestamp data
load(file=paste0(group,'_xy_highres_level1.RData'))
#PROCESS
#preprocess events to...
events <- events[which(events$fission_time!='before start'),] #remove events where we missed the start
events <- events[which(events$event_type %in% c('fission','fusion')),] #only include fission and fusion events (remove 'almost fusion')
#modify coati ids to only include first 3 letters
coati_ids$name_short <- sapply(coati_ids$name, function(x){return(substr(x,1,3))})
#create columns for subgroup idxs (initialize with zeros to convince R to let oyu do this)
events$group_A_idxs <- list(c(0,0,0))
events$group_B_idxs <- list(c(0,0,0))
for (i in 1:nrow(events)){
group_A_names <- events$group_A[i]
group_B_names <- events$group_B[i]
group_A_idxs <- match_coati_names(group_A_names, coati_ids)
group_B_idxs <- match_coati_names(group_B_names, coati_ids)
events$group_A_idxs[i] <- list(group_A_idxs)
events$group_B_idxs[i] <- list(group_B_idxs)
}
#merge fission_time and fusion_time columns into one
events$time_min <- paste0(events$fission_time,events$fusion_time)
#convert to POSIX
events$datetime <- as.POSIXct(paste(events$date, events$time_min), format = "%Y-%m-%d %H:%M",tz = "UTC")
#match times to get indexes into matrices
events$tidx <- match(events$datetime, ts)
#count up how many individuals are in each group
events$n_A <- unlist(lapply(events$group_A_idxs,length))
events$n_B <- unlist(lapply(events$group_B_idxs,length))
events$before_time <- events$start_time <- events$end_time <- events$after_time <- NA
events$AB_before_disp <- events$A_during_disp <- events$B_during_disp <- NA
events$split_angle <- events$turn_angle_A <- events$turn_angle_B <- NA
for(i in c(1:nrow(events))){
print(i)
ff_data <- analyse_ff_event(i, events, xs, ys, ts, plot=F, max_time = 600)
if(!is.null(ff_data$disps)){
events$AB_before_disp[i] <- ff_data$disps['AB','before']
events$A_during_disp[i] <- ff_data$disps['A','during']
events$B_during_disp[i] <- ff_data$disps['B','during']
}
events$split_angle[i] <- ff_data$split_angle
events$turn_angle_A[i] <- ff_data$turn_angle_A
events$turn_angle_B[i] <- ff_data$turn_angle_B
events$before_time[i] <- ff_data$before_time
events$start_time[i] <- ff_data$start_time
events$end_time[i] <- ff_data$end_time
events$after_time[i] <- ff_data$after_time
}
#now have events as the manual labels
R_inner <- 15
R_outer <- 50
events_aut <- detect_fissions_and_fusions(R_inner = R_inner, R_outer = R_outer,  xs = xs, ys = ys, ts = ts, coati_ids = coati_ids, verbose = T )
View(events_aut)
events_aut_detected <- events_aut$events_detected
View(events_aut_detected)
View(events)
col(events)
colnames(events)
#now have events as the manual labels
#reduce number of columns for easier comparison
events_man <- events[, c("tidx", "datetime", "event_type", "group_A_idxs", "group_B_idxs", "n_A", "n_B" )]
View(events_man)
View(events_aut_detected)
View(ff_data)
#this script is for comparing the fission fusion events in the automated detection to the manual labels
#LIBRARY
library(lubridate)
#set time zone to UTC to avoid confusing time zone issues
Sys.setenv(TZ='UTC')
group <- 'presedente' #subdirectory where the group data is stored
codedir <- 'C:/Users/egrout/Dropbox/coatithon/coatithon_code/'
#groupdir <- "C:/Users/egrout/Dropbox/coatithon/processed/2022/galaxy/"
#plot_dir <- 'C:/Users/egrout/Dropbox/coatithon/results/galaxy_results/level1/'
groupdir <- "C:/Users/egrout/Dropbox/coatithon/processed/2023/presedente/"
plot_dir <- 'C:/Users/egrout/Dropbox/coatithon/results/presedente_results/level1/'
#FUNCTIONS
#read in functions
setwd(codedir)
source('coati_function_library.R')
#LOAD DATA
#navigate into directory
setwd(codedir)
#read in events
events <- read.csv(paste0('Split_mechanics/',group,'_manual_split_merge_clean.csv'), sep=';')
#read in coati ids
setwd(groupdir)
load(file=paste0(group,'_coati_ids.RData'))
#read in timestamp data
load(file=paste0(group,'_xy_highres_level1.RData'))
#PROCESS
#preprocess events to...
events <- events[which(events$fission_time!='before start'),] #remove events where we missed the start
events <- events[which(events$event_type %in% c('fission','fusion')),] #only include fission and fusion events (remove 'almost fusion')
#modify coati ids to only include first 3 letters
coati_ids$name_short <- sapply(coati_ids$name, function(x){return(substr(x,1,3))})
#create columns for subgroup idxs (initialize with zeros to convince R to let oyu do this)
events$group_A_idxs <- list(c(0,0,0))
events$group_B_idxs <- list(c(0,0,0))
for (i in 1:nrow(events)){
group_A_names <- events$group_A[i]
group_B_names <- events$group_B[i]
group_A_idxs <- match_coati_names(group_A_names, coati_ids)
group_B_idxs <- match_coati_names(group_B_names, coati_ids)
events$group_A_idxs[i] <- list(group_A_idxs)
events$group_B_idxs[i] <- list(group_B_idxs)
}
#merge fission_time and fusion_time columns into one
events$time_min <- paste0(events$fission_time,events$fusion_time)
#convert to POSIX
events$datetime <- as.POSIXct(paste(events$date, events$time_min), format = "%Y-%m-%d %H:%M",tz = "UTC")
#match times to get indexes into matrices
events$tidx <- match(events$datetime, ts)
#count up how many individuals are in each group
events$n_A <- unlist(lapply(events$group_A_idxs,length))
events$n_B <- unlist(lapply(events$group_B_idxs,length))
events$before_time <- events$start_time <- events$end_time <- events$after_time <- NA
events$AB_before_disp <- events$A_during_disp <- events$B_during_disp <- NA
events$split_angle <- events$turn_angle_A <- events$turn_angle_B <- NA
for(i in c(1:nrow(events))){
print(i)
ff_data <- analyse_ff_event(i, events, xs, ys, ts, plot=F, max_time = 600)
if(!is.null(ff_data$disps)){
events$AB_before_disp[i] <- ff_data$disps['AB','before']
events$A_during_disp[i] <- ff_data$disps['A','during']
events$B_during_disp[i] <- ff_data$disps['B','during']
}
events$split_angle[i] <- ff_data$split_angle
events$turn_angle_A[i] <- ff_data$turn_angle_A
events$turn_angle_B[i] <- ff_data$turn_angle_B
events$before_time[i] <- ff_data$before_time
events$start_time[i] <- ff_data$start_time
events$end_time[i] <- ff_data$end_time
events$after_time[i] <- ff_data$after_time
}
#now have events as the manual labels
#reduce number of columns for easier comparison
events_man <- events[, c("tidx", "datetime", "event_type", "group_A_idxs", "group_B_idxs", "n_A", "n_B" )]
#manual labels start 2 days after gps on - but can't find where in code we excluded the first 2 days?
#make automated labels using Ari's function
R_inner <- 15
R_outer <- 50
events_aut <- detect_fissions_and_fusions(R_inner = R_inner, R_outer = R_outer,  xs = xs, ys = ys, ts = ts, coati_ids = coati_ids, verbose = T )
events_aut_detected <- events_aut$events_detected
View(events_man)
?write.table
#save the events_man and events_aut_detected to txt files
setwd('C:/Users/egrout/Dropbox/coatithon/coatithon_code/Split_mechanics/labels/')
paste0(group_ "events_man", ".txt")
paste0(group_, "events_man.txt")
paste0(group, "events_man.txt")
paste0(group, "_events_man.txt")
#save the events_man and events_aut_detected to txt files
setwd('C:/Users/egrout/Dropbox/coatithon/coatithon_code/Split_mechanics/labels/')
write.table(events_man, paste0(group, "_events_man.txt"),sep="\t",row.names=FALSE)
write.table(events_man, paste0(group, "_events_man.txt"),row.names=FALSE)
write.table(events_man, paste0(group, "_events_man.txt"))
View(events_man)
View(events)
events_aut_txt <- events[, c("tidx", "datetime", "event_type", "n_A", "n_B" )]
View(events_aut_txt)
View(events_man)
events_man_txt <- events[, c("tidx", "datetime", "event_type", "n_A", "n_B" )]
View(events_man_txt)
View(events_aut_txt)
View(events_man_txt)
events_aut_txt <- events_aut_detected[, c("tidx", "datetime", "event_type", "n_A", "n_B" )]
View(events_aut_txt)
events_man_txt <- events[, c("tidx", "datetime", "event_type", "n_A", "n_B" )]
events_aut_txt <- events_aut_detected[, c("tidx", "datetime", "event_type", "n_A", "n_B" )]
#save the events_man and events_aut_detected to txt files
setwd('C:/Users/egrout/Dropbox/coatithon/coatithon_code/Split_mechanics/labels/')
write.table(events_man_txt, paste0(group, "_events_man.txt"))
write.table(events_aut_txt, paste0(group, "_events_aut.txt"))
#now have events as the manual labels
#reduce number of columns for easier comparison
events_man <- events[, c("tidx", "datetime", "event_type", "group_A_idxs", "group_B_idxs","group_A", "group_B", "n_A", "n_B" )]
